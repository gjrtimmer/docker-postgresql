#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# shellcheck source=../../../conf.d/include/generic
source /etc/conf.d/include/generic

# shellcheck disable=SC2011
if [[ "$(ls /var/run/s6/container_environment/ | xargs)" == *"FILE__"* ]]; then
  for FILENAME in /var/run/s6/container_environment/*; do
    if [[ "${FILENAME##*/}" == "FILE__"* ]]; then
      SECRETFILE=$(cat "${FILENAME}")
      if [[ -f ${SECRETFILE} ]]; then
        FILESTRIP=${FILENAME//FILE__/}
        cat "${SECRETFILE}" > "${FILESTRIP}"
        echo "[env-init] ${FILESTRIP##*/} set from ${FILENAME##*/}"
      else
        echo "[env-init] cannot find secret in ${FILENAME##*/}"
      fi
    fi
  done
fi

# Configure Shell
if [ ! -f "${HOME}/.bashrc" ]; then
  cp /defaults/skel/.bashrc "${HOME}/.bashrc"
fi

if [ ! -L /root/.bashrc ]; then
  ln -s "${HOME}/.bashrc" /root/.bashrc
fi

if [ ! -f "${HOME}/.bash_aliases" ]; then
  cp /defaults/skel/.bash_aliases "${HOME}/.bash_aliases"
fi

if [ ! -f "${HOME}/.psql_history" ]; then
  touch "${HOME}/.psql_history"
  chown "${PG_USER}:${PG_USER}" "${HOME}/.psql_history"
fi
lsiown abc:abc "${HOME}/.bashrc" "${HOME}/.bash_aliases"

# Set container timezone
cp "/usr/share/zoneinfo/${TZ}" /etc/localtime
log-init "Timezone set to ${TZ}"

# Load Environment Variables
set -o allexport
# shellcheck source=../../../conf.d/env.generic
source /etc/conf.d/env.generic
# shellcheck source=../../../conf.d/env.cron
source /etc/conf.d/env.cron
# shellcheck source=../../../conf.d/env.postgres
source /etc/conf.d/env.postgres
# shellcheck source=../../../conf.d/env.repmgr
source /etc/conf.d/env.repmgr
set +o allexport

# Print Environment
log-init "Environment Variables:"
MASKED=("PG_PASS" "DB_PASS" "REPLICATION_PASS REPMGR_PASS")
FILTER_SNAPSHOT=("DB_NAME" "DB_USER" "DB_PASS" "PG_PASS" "REPMGR_PASS")
env -0 | sort -z | while IFS='=' read -r -d '' k v; do
  case ${REPLICATION_MODE,,} in
    standby) ;;
    snapshot)
      if [[ " ${FILTER_SNAPSHOT[*]} " =~ $k ]]; then
        continue
      fi
    ;;
    backup) ;;
  esac

  if [ -z "$v" ]; then
    log-init "  $k=<not-set>"
  else
    if [[ " ${MASKED[*]} " =~ $k ]]; then
      log-init "  $k=********"
    else
      log-init "  $k=$v"
    fi
  fi
done

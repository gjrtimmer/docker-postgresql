#!/usr/bin/with-contenv bash
# shellcheck shell=bash disable=SC1008
set -e

# shellcheck source=../../../../conf.d/include/postgres
source /etc/conf.d/include/postgres

if ! psql_is_initialized; then
  case ${REPLICATION_MODE,,} in
    standby|snapshot|backup|repmgr-standby)
      # Wait for master to be ready
      is_master_ready

      case ${REPLICATION_MODE,,} in
        standby|repmgr-standby)
          psql-standby
        ;;

        snapshot)
          psql-snapshot
        ;;

        backup)
          psql-backup
        ;;
      esac
    ;;

    *)
      if psql_is_migration; then
        log-init "previous PostgreSQL version detected (${PG_OLD_VERSION})"

        log-init "calculating disk space availability for migration"
        DB_DISK_USAGE=$(du -Lsx "${PG_HOME}/${PG_OLD_VERSION}" | awk '{print $1}' | tr -d '\n')
        DISK_SPACE_AVAILABLE=$(df --sync "${PG_HOME}/${PG_OLD_VERSION}" | awk 'NR>1 {print $4}')
        DISK_USE=$(( DISK_SPACE_AVAILABLE - (DB_DISK_USAGE + (1024*1024)) ))
        if (( DISK_USE <= 0 )); then
          log-init "insufficient free disk space available"
          exit 11
        fi

        if is_enabled "${PG_MIGRATE_DATA_BACKUP}"; then
          # user requested a copy of the data in case it all goes wrong
          # First check if we have enough space for the data backup
          # data backup requires 2 twice the size of migration
          # 1x for backup copy
          # 1x for migration
          log-init "calculating disk space availability for migration + backup"
          DISK_USE=$(( DISK_SPACE_AVAILABLE - ((DB_DISK_USAGE * 2) + (1024*1024)) ))
          if (( DISK_USE <= 0 )); then
            log-init "insufficient free disk space available"
            exit 12
          fi

          # Create backup
          BACKUP_DIR="${PG_HOME}/${PG_OLD_VERSION}.backup"
          if [ ! -d "${BACKUP_DIR}" ]; then
            log-init "creating backup"
            rsync -ah --progress "${PG_HOME}/${PG_OLD_VERSION}/" "${BACKUP_DIR}"
          else
            log-init "backup directory already exists"
            exit 13
          fi
        fi
      fi

      if [[ -n ${PG_PASS} ]]; then
        echo "${PG_PASS}" > /tmp/pwfile
      fi

      # build initdb command params
      declare -a INITDB_PARAMS=()
      INITDB_PARAMS+=(--pgdata="${PG_DATA_DIR}")
      INITDB_PARAMS+=(--username="${PG_USER}")
      INITDB_PARAMS+=(--locale="${LANG}")
      INITDB_PARAMS+=(--encoding=unicode)
      INITDB_PARAMS+=(--auth=trust ${PG_PASS:+--pwfile=/tmp/pwfile})

      # Configuration of wal segment size if only available from version 11+
      if (( "${PG_VERSION_MAJOR}" >= 11 )); then
        INITDB_PARAMS+=(--wal-segsize="${PG_JOURNAL_WAL_SEGMENT_SIZE}")
      fi

      log-init "initializing database..."
      s6-setuidgid abc initdb "${INITDB_PARAMS[@]}" > "${PG_LOG_DIR}/initdb-${PG_VERSION_SLUG}.log"

      # Save the current PostgreSQL to the data mount
      # The bin and lib directory are copied to the data mount.
      # This is done so we have the old PostgreSQL binaries and libraries
      # available for future upgrade.
      #
      # This only applies to the older version of PostgreSQL, newer versions of
      # PostgreSQL can be installed next to each other in alpine.
      psql_create_old_rootfs

      if psql_is_migration; then
        log-init "migrating PostgreSQL ${PG_OLD_VERSION} data to ${PG_VERSION_SLUG}..."

        if (( "${PG_OLD_VERSION_MAJOR}" < 12 )); then
          PG_OLD_ROOTFS="${PG_HOME}/${PG_OLD_VERSION}/.rootfs"
          PG_OLD_LIB=${PG_OLD_ROOTFS}/lib
          PG_OLD_USRLIB=${PG_OLD_ROOTFS}/usr/lib
          PG_OLD_BINDIR=${PG_OLD_ROOTFS}/usr/bin
        else
          log-init "os: updating package indexes"
          apk update > /dev/null 2>&1
          log-init "os: installing previous PostgreSQL ${PG_OLD_VERSION_MAJOR}"
          apk add --no-cache "postgresql${PG_OLD_VERSION_MAJOR}" "postgresql${PG_OLD_VERSION_MAJOR}-client"

          PG_OLD_USRLIB="/usr/lib/postgresql${PG_OLD_VERSION_MAJOR}"
          PG_OLD_BINDIR="/usr/libexec/postgresql${PG_OLD_VERSION_MAJOR}"
        fi

        PG_OLD_DATADIR=${PG_HOME}/${PG_OLD_VERSION}/main
        PG_OLD_CONF=${PG_OLD_DATADIR}/postgresql.conf
        PG_OLD_HBA_CONF=${PG_OLD_DATADIR}/pg_hba.conf
        PG_OLD_IDENT_CONF=${PG_OLD_DATADIR}/pg_ident.conf

        # Build pg_upgrade command params
        declare -a PG_UPGRADE_PARAMS=()
        PG_UPGRADE_PARAMS+=(--jobs="$(nproc)")
        PG_UPGRADE_PARAMS+=(--username="${PG_USER}")
        PG_UPGRADE_PARAMS+=(--old-bindir="${PG_OLD_BINDIR}")
        PG_UPGRADE_PARAMS+=(--new-bindir="/usr/bin")
        PG_UPGRADE_PARAMS+=(--old-datadir="${PG_OLD_DATADIR}")
        PG_UPGRADE_PARAMS+=(--new-datadir="${PG_DATA_DIR}")
        PG_UPGRADE_PARAMS+=(--old-options="-c config_file=${PG_OLD_CONF} --hba_file=${PG_OLD_HBA_CONF} --ident_file=${PG_OLD_IDENT_CONF}")
        PG_UPGRADE_PARAMS+=(--new-options="-c config_file=${PG_CONF} --hba_file=${PG_HBA_CONF} --ident_file=${PG_IDENT_CONF}")

        # Set socket location for version 12 and greater
        if (( "${PG_VERSION_MAJOR}" >= 12 )); then
          PG_UPGRADE_PARAMS+=(--socketdir="${PG_RUN_DIR}")
        fi

        # Set library version location derived from version
        if (( "${PG_OLD_VERSION_MAJOR}" < 12 )); then
          PG_LIB_PATH="${PG_OLD_LIB}:${PG_OLD_USRLIB}:/lib:/usr/local/lib:/usr/lib"
        else
          PG_LIB_PATH="${PG_OLD_USRLIB}:/lib:/usr/local/lib:/usr/lib"
        fi

        log-init "starting migration. Please be patient"
        cd "${PG_HOME}"
        s6-setuidgid abc stdbuf -o0 exec env LD_LIBRARY_PATH="${PG_LIB_PATH}" pg_upgrade "${PG_UPGRADE_PARAMS[@]}" 2>&1 | stdbuf -i0 -o0 tee "${PG_LOG_DIR}/pg_upgrade-v${PG_OLD_VERSION}-v${PG_VERSION_SLUG}.log"
        if grep -q 'Upgrade Complete' "${PG_LOG_DIR}/pg_upgrade-v${PG_OLD_VERSION}-v${PG_VERSION_SLUG}.log"; then
          log-init "migration succesful"
          env_set PG_MIGRATION_SUCCESS 1
        else
          log-init "migration failed"
          env_set PG_MIGRATION_SUCCESS 0
          exit 62
        fi
      fi
    ;;
  esac

  # Configure filesystem journal
  # Change DSM from `posix' to `sysv' if we are inside an lx-brand container
  if [ "$(uname -v)" == "BrandZ virtual linux" ]; then
    set_postgresql_param "dynamic_shared_memory_type" "sysv"
  fi
else
  log-init "database already initialized"
fi

# configure path to data_directory
set_postgresql_param "data_directory" "${PG_DATA_DIR}"
